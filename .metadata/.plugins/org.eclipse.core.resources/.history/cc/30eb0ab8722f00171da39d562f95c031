package com.sap.icp;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class StateMachineTest {
	private StateMachineInterface<Integer, Character> sm = new statemachine.StateMachine<Integer, Character>();

	@Before
	public void init() {
		sm.addTransition(1, 'a', 2);
		sm.addTransition(2, 'a', 2);
		sm.addTransition(2, 'b', 3);
		sm.addTransition(1, 'c', 4);
		sm.addTransition(4, 'b', 4);

		sm.addAcceptingState(3);
		sm.addAcceptingState(4);
	}

	public StateMachineTest(Integer start_state, String input, Boolean should_pass) {
		this.start_state = start_state;
		this.input = input;
		this.should_pass = should_pass;
	}

	private int start_state;
	private String input;
	private boolean should_pass;

	@Parameters(name = "{index}: input: {1}")
	public static Iterable<Object[]> data() {
		return Arrays.asList(new Object[][] {//
				{ 1, "aaaab", true }, //
						{ 1, "ab", true }, //
						{ 1, "c", true }, //
						{ 1, "cbbbb", true }, //
						{ 1, "aba", false }, //
						{ 1, "acb", false }, //
						{ 1, "ccccb", false }, //
						{ 1, "", false }, //
						{ 1, "ccccbbbb", false }, //
						{ 1, "abcd", false } //
				});
	}

	@Test
	public void test() {
		List<Character> listC = new ArrayList<Character>();
		for (char c : input.toCharArray()) {
			listC.add(c);
		}

		assertEquals(should_pass, sm.accepts(start_state, listC));
	}
}
